from flask import Flask, request
import requests
import json
import os
import traceback
import time

app = Flask(__name__)

# === –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
AMO_DOMAIN = "https://shcherbakovxsizemoscow.amocrm.ru"
TOKEN_FILE = "amo_tokens.json"

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ===
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")

# === OAuth2 –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ ===
CLIENT_ID = os.environ.get("AMO_CLIENT_ID")
CLIENT_SECRET = os.environ.get("AMO_CLIENT_SECRET")
REDIRECT_URI = os.environ.get("AMO_REDIRECT_URI")

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ access_token ===
def get_tokens():
    if not os.path.exists(TOKEN_FILE):
        raise Exception("–§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    with open(TOKEN_FILE, "r") as f:
        return json.load(f)

def save_tokens(tokens):
    with open(TOKEN_FILE, "w") as f:
        json.dump(tokens, f)

def refresh_access_token():
    tokens = get_tokens()
    response = requests.post(f"{AMO_DOMAIN}/oauth2/access_token", json={
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "grant_type": "refresh_token",
        "refresh_token": tokens["refresh_token"],
        "redirect_uri": REDIRECT_URI
    })
    new_tokens = response.json()
    save_tokens(new_tokens)
    return new_tokens["access_token"]

def get_valid_access_token():
    tokens = get_tokens()
    return tokens["access_token"]

def authorized_get(url):
    token = get_valid_access_token()
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(url, headers=headers)
    if response.status_code == 401:
        print("üîÑ –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º...")
        token = refresh_access_token()
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(url, headers=headers)
    return response

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –æ—Ç amoCRM ===
@app.route("/", methods=["POST"])
def webhook():
    try:
        print("üîî –ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å –æ—Ç amoCRM")
        form = request.form.to_dict(flat=False)
        print("üì• –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:", form)

        lead_id = form.get("leads[add][0][id]", [None])[0]
        print(f"‚û°Ô∏è ID —Å–¥–µ–ª–∫–∏: {lead_id}")

        if not lead_id:
            return "ID —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", 400

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        lead_response = authorized_get(f"{AMO_DOMAIN}/api/v4/leads/{lead_id}?with=contacts")
        lead_data = lead_response.json()
        print("üìÑ –û—Ç–≤–µ—Ç –æ—Ç /leads:", lead_data)

        contact_id = (
            lead_data.get("_embedded", {})
            .get("contacts", [{}])[0]
            .get("id")
        )
        print(f"üë§ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞: {contact_id}")

        if not contact_id:
            return "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", 400

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_response = authorized_get(f"{AMO_DOMAIN}/api/v4/contacts/{contact_id}?with=custom_fields")
        contact_data = contact_response.json()
        print("üë§ –û—Ç–≤–µ—Ç –æ—Ç /contacts:", contact_data)

        name = contact_data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        phone = "–ù–µ —É–∫–∞–∑–∞–Ω"

        for field in contact_data.get("custom_fields_values", []):
            if field.get("field_name", "").lower() == "—Ç–µ–ª–µ—Ñ–æ–Ω":
                phone = field["values"][0].get("value")
                break

        message = f"üîî –ù–æ–≤—ã–π –ª–∏–¥!\nüë§ –ò–º—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram:", message)

        tg_response = requests.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            data={"chat_id": CHAT_ID, "text": message}
        )
        print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Telegram:", tg_response.text)

        return "OK", 200

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ webhook:")
        traceback.print_exc()
        return f"–û—à–∏–±–∫–∞: {str(e)}", 500

@app.route("/", methods=["GET"])
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=81)
